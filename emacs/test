    ;; Ryen's emacs config
;; (global-git-gutter-mode +1)

;; ;; MELPA
;; (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
;;              ("marmalade" . "http://marmalade-repo.org/packages/")
;;              ("melpa" . "http://melpa.org/packages/")))

;; ;; interface
;; (setq mouse-wheel-scroll-amount '(4 ((shift) . 1))) ;; one line at a time
;;     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
;;     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;;     (setq scroll-step 1) ;; keyboard scroll one line at a time

;; Set load path
;; (let ((default-directory "~/.emacs.d/"))
;;   (normal-top-level-add-subdirs-to-load-path))

;; emacs path
;; (setenv "PATH" (concat (getenv "PATH") ":/Users/ryen/.npm-packages/bin"))
;; (setq exec-path (append exec-path '("/Users/ryen/.npm-packages/bin")))

;; ;; backups
;; (setq backup-directory-alist `(("." . "~/.saves")))
;; (setq backup-by-copying t)

;; ;; switch
;; (c-set-offset 'case-label '+)

;; scss
;; (setq scss-compile-at-save nil)
;; (setq css-indent-offset 2)

;; ;; whitespace
;; ; ; make carriage returns blue and tabs green
;; (custom-set-faces
;;  '(my-carriage-return-face ((((class color)) (:background "blue"))) t)
;;  '(my-tab-face ((((class color)) (:background "green"))) t)
;;  )
;; ; add custom font locks to all buffers and all files
;; (add-hook
;;  'font-lock-mode-hook
;;  (function
;;   (lambda ()
;;     (setq
;;      font-lock-keywords
;;      (append
;;       font-lock-keywords
;;       '(
;;         ("\r" (0 'my-carriage-return-face t))
;;         ("\t" (0 'my-tab-face t))
;;         ))))))

;; ;; smart parens
;; ;; (add-to-list 'load-path "~/.emacs.d/packages/smartparens")
;; ;; (require 'smartparens-config)
;; ;; Always start smartparens mode in js-mode.
;; ;; (add-hook 'js-mode-hook #'smartparens-mode)

;; ;; make characters after column 80 purple
;; (setq whitespace-style
;;   (quote (face trailing tab-mark lines-tail)))
;; (add-hook 'find-file-hook 'whitespace-mode)

;; ;; transform literal tabs into a right-pointing triangle
;; (setq
;;  whitespace-display-mappings ;http://ergoemacs.org/emacs/whitespace-mode.html
;;  '(
;;    (tab-mark 9 [9654 9] [92 9])
;;    ;others substitutions...
;;    ))

;; Appearance
;; (fset 'yes-or-no-p 'y-or-n-p)
;; (setq inhibit-splash-screen t)
;; (setq-default indent-tabs-mode nil)
;; (menu-bar-mode -1) ;; minimal chrome
;; (tool-bar-mode -1) ;; no toolbar
;; (x-focus-frame nil) ;; Display on top when opened from command line
;; (global-linum-mode t)

;; (add-to-list 'load-path "~/.emacs.d/packages/neotree")
;; (require 'neotree)
;; (global-set-key (kbd "C-x C-d") 'neotree-toggle)

;; JsDoc
;; (add-to-list 'load-path "~/.emacs.d/packages/js-doc")
;; (require 'js-doc)

;; (setq js-doc-mail-address "your email address"
;;        js-doc-author (format "your name <%s>" js-doc-mail-address)
;;        js-doc-url "url of your website"
;;        js-doc-license "license name")

 ;; (add-hook 'js2-mode-hook
 ;;           #'(lambda ()
 ;;               (define-key js2-mode-map "\C-ci" 'js-doc-insert-function-doc)
 ;;               (define-key js2-mode-map "@" 'js-doc-insert-tag)))

;; ;; Backups
;; (setq backup-directory-alist `(("." . "~/.saves")))
;; (setq backup-by-copying t)

;; Tabs
;; (setq-default indent-tabs-mode nil)
;; (setq-default tab-width 4)
;; (setq indent-line-function 'insert-tab)

;; (add-to-list 'default-frame-alist '(font . "Roboto-Mono-17"))
;; (set-face-attribute 'default t :font "Roboto-Mono-17")
;; (add-to-list 'default-frame-alist '(font . "InputMono-Light-16"))
;; (set-face-attribute 'default t :font "InputMono-Light-16")
(add-to-list 'default-frame-alist '(font . "Whois-18"))
(set-face-attribute 'default t :font "Whois-18")

;; Plugins

;; Flycheck
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))
(flycheck-add-mode 'javascript-eslint 'web-mode)
(setq-default flycheck-temp-prefix ".flycheck")
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; Web Mode
;; (require 'web-mode)
;; (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

;; ;; Cocoascript
;; (add-to-list 'auto-mode-alist '("\\.cocoascript\\'" . javascript-mode))

;; adjust indents for web-mode to 2 spaces
;; (defun my-web-mode-hook ()
;;   (setq web-mode-markup-indent-offset 2)
;;   (setq web-mode-css-indent-offset 2)
;;   (setq web-mode-code-indent-offset 2))
;; (add-hook 'web-mode-hook  'my-web-mode-hook)

;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
;;   (if (equal web-mode-content-type "jsx")
;;     (let ((web-mode-enable-part-face nil))
;;       ad-do-it)
;;     ad-do-it))

;; (require 'emmet-mode)

;; js mode
;; (setq js-indent-level 2)

;; autopair
;; (require 'autopair)
;; (autopair-global-mode)

;; Emmet config
;; (add-to-list 'load-path "~/emacs.d/packages/emmet-mode")
;; (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
;; (add-hook 'js-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
;; (add-hook 'css-mode-hook  'emmet-mode)
;; (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.
;; (setq emmet-expand-jsx-className? t) ;; default nil)
;; (setq emmet-self-closing-tag-style " /") ;; default "/"
;; (setq emmet-move-cursor-between-quotes t)
;; (setq emmet-move-cursor-after-expanding t)
;; (define-key emmet-mode-keymap [tab] 'emmet-expand-line)

;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/base16")
;; (load-theme 'base16-ocean-dark t)
;; (load-theme 'leuven t)
;; (load-theme 'tsdh-dark t)
;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
;; (load-theme 'solarized t)
;; (load-theme 'atom-dark t)
;; (load-theme 'badwolf t)
;; (load-theme 'basic t)
;; (load-theme 'birds-of-paradise-plus t)
;; (load-theme 'bliss t)
;; (load-theme 'borland-blue t)
;; (load-theme 'boron t)

;; (setq whitespace-action '(auto-cleanup))
;; (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))

;; autocomplete
;; (add-to-list 'load-path "~/.emacs.d/packages/auto-complete")
;; (require 'auto-complete)

;; babel repl
;; (require 'babel-repl)
;; (setq babel-repl-cli-program "/usr/local/bin/babel-node")
;; (setq babel-repl-cli-arguments '("--trace-sync-io"))

;; evil
;;(require 'evil)
;;(evil-mode 1)

;; repl
;; (require 'nodejs-repl)
