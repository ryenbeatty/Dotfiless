;; switch
(c-set-offset 'case-label '+)

;; Tabs
(setq indent-line-function 'insert-tab)

(require 'package)

; List the packages you want
(setq package-list '(
         auto-complete
         base16-theme
         ; rainbow-delimiter
         elscreen
         projectile
         powerline
         git-gutter
         smartparens
         ;; jshint
         ;; elm-mode
         flycheck
         js3-mode
         haskell-mode
         linum-relative))

; Add Melpa as the default Emacs Package repository
; only contains a very limited number of packages
;;(add-to-list 'package-archives
;;             '("melpa" . "http://stable.melpa.org/packages/") t)
(require 'package)
(add-to-list 'package-archives
	                  '("melpa" . "http://melpa.org/packages/") t)

; Activate all the packages (in particular autoloads)
(package-initialize)

; Update your local package index
(unless package-archive-contents
  (package-refresh-contents))

; Install all missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

; Elscreen
;; (elscreen-start)
;; (elscreen-set-prefix-key "\C-b")

; Linum
(require 'linum-relative)

; Always ALWAYS use UTF-8
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(load-library "iso-transl")

; Automatically save buffers before compiling
(setq compilation-ask-about-save nil)

; Always ask for y/n keypress instead of typing out 'yes' or 'no'
(defalias 'yes-or-no-p 'y-or-n-p)

; General UI stuff
(global-linum-mode t)
(global-hl-line-mode t)
(setq-default indent-tabs-mode nil)
(setq default-tab-width 2)
; (setq inhibit-startup-message t)
(setq visible-bell 'top-bottom)
(setq x-underlineino-at-descent-line t)
; (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
; (unless (display-graphic-p) (menu-bar-mode -1))
(setq mouse-wheel-scroll-amount '(4 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)

; projectile
(add-to-list 'load-path "~/.emacs.d/packages/projectile")
(require 'projectile)
(projectile-global-mode)
(setq projectile-indexing-method 'native)
(setq projectile-enable-caching t)
(global-set-key (kbd "C-x f") 'projectile-find-file)

; javascripting
(add-to-list 'load-path "~/.emacs.d/packages/js3-mode")
(require 'js3-mode nil)

(defun ome-js3-mode-setup ()
  (add-hook 'js3-mode-hook
            (lambda ()
              (setq js3-auto-indent-p t
                    js3-curly-indent-offset 0
                    js3-enter-indents-newline t
                    js3-expr-indent-offset 2
                    js3-indent-on-enter-key t
                    js3-lazy-commas t
                    js3-lazy-dots t
                    js3-lazy-operators t
                    js3-paren-indent-offset 2
                    js3-square-indent-offset 4)
              (linum-mode 1)))

            ;; https://github.com/Fuco1/smartparens/issues/239
            ;; (defadvice js3-enter-key (after fix-sp-state activate)
            ;;   (setq sp-last-operation 'sp-self-insert))

            ;; (sp-local-pair 'js3-mode
            ;;                "{"
            ;;                nil
            ;;                :post-handlers
            ;;                '((ome-create-newline-and-enter-sexp js3-enter-key))))
  (add-to-list 'ac-modes 'js3-mode))
'(js3-auto-indent-p t)         ; it's nice for commas to right themselves.
 '(js3-enter-indents-newline t) ; don't need to push tab before typing
 '(js3-indent-on-enter-key t)   ; fix indenting before moving on

;; auto complete mode
(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(set-default 'ac-sources
             '(ac-source-imenu
               ac-source-dictionary
               ac-source-words-in-buffer
               ac-source-words-in-same-mode-buffers
               ac-source-words-in-all-buffer))

;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;; activate, otherwise, auto-complete will
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")

;; Theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/base16")
(load-theme 'base16-ocean-dark t)
(setq-default line-spacing 4)

;; (set-default-font "InputMono-Light-13")
;; (set-default-font "InputMono-Light-13")
;; (set-default-font "SpaceMono-Regular-18")
;; (set-default-font "Space-Mono-15")

;; (add-to-list 'default-frame-alist '(font . "SpaceMono-Regular-18" ))
;; (set-face-attribute 'default t :font "SpaceMono-Regular-18" )
; AB
(require 'powerline)
(powerline-default-theme)

(require 'git-gutter)
(global-git-gutter-mode t)

(add-to-list 'load-path "~/.emacs.d/packages/smartparens")
(require 'smartparens-config)
(add-hook 'js-mode-hook #'smartparens-mode)

(add-to-list 'load-path "~/.emacs.d/packages/rainbow-delimiters")
(require 'rainbow-delimiters nil)
;; (rainbow-delimiters-mode 1)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(require 'icomplete)

;; backups
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)

;; switch
(c-set-offset 'case-label '+)

;; scss
(setq scss-compile-at-save nil)
(setq css-indent-offset 2)

;; whitespace
(custom-set-faces
 '(my-carriage-return-face ((((class color)) (:background "blue"))) t)
 '(my-tab-face ((((class color)) (:background "green"))) t))

; add custom font locks to all buffers and all files
;; (add-hook
;;  'font-lock-mode-hook
;;  (function
;;   (lambda ()
;;     (setq
;;      font-lock-keywords
;;      (append
;;       font-lock-keywords
;;       '(
;;         ("\r" (0 'my-carriage-return-face t))
;;         ("\t" (0 'my-tab-face t))
;;         ))))))

;; smart parens
(add-to-list 'load-path "~/.emacs.d/packages/smartparens")
(require 'smartparens-config)
;; Always start smartparens mode in js-mode.
(add-hook 'js-mode-hook #'smartparens-mode)

; make characters after column 80 purple
(setq whitespace-style
  (quote (face trailing tab-mark lines-tail)))
(add-hook 'find-file-hook 'whitespace-mode)

; transform literal tabs into a right-pointing triangle
(setq
 whitespace-display-mappings ;http://ergoemacs.org/emacs/whitespace-mode.html
 '(
   (tab-mark 9 [9654 9] [92 9])
   ;others substitutions...
   ))

; tree
(add-to-list 'load-path "~/.emacs.d/packages/neotree")
(require 'neotree)
(global-set-key (kbd "C-x C-d") 'neotree-toggle)

; flycheck
;; (add-to-list 'load-path "~/.emacs.d/packages/flycheck")
(require 'flycheck)
(package-install 'flycheck)
;; (add-hook 'after-init-hook #'global-flycheck-mode)
;; (add-hook 'js2-mode-hook
;;           (lambda () (flycheck-mode t)))
(add-hook 'js2-mode-hook 'flycheck-mode)
(setq flycheck-jshintrc "~/.emacs.d/.jshintrc")

; jsdoc
(add-to-list 'load-path "~/.emacs.d/packages/js-doc")
(require 'js-doc)

; cocoascript
(add-to-list 'auto-mode-alist '("\\.cocoascript\\'" . javascript-mode))

; emmet
(require 'emmet-mode)
(add-to-list 'load-path "~/emacs.d/packages/emmet-mode")
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'js-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
(setq emmet-expand-jsx-className? t) ;; default nil)
(setq emmet-self-closing-tag-style " /") ;; default "/"
(setq emmet-move-cursor-between-quotes t)
(setq emmet-move-cursor-after-expanding t)
(define-key emmet-mode-keymap [tab] 'emmet-expand-line)

; js mode
(setq js-indent-level 2)

;; (setq whitespace-action '(auto-cleanup))
;; (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))

(require 'whitespace)
(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))

;; (autoload 'whitespace-mode           "whitespace" "Toggle whitespace visualization."        t)
;; (autoload 'whitespace-toggle-options "whitespace" "Toggle local `whitespace-mode' options." t)
;; (setq-default show-trailing-whitespace t)
;; (setq whitespace-display-mappings '((space-mark 32 [?Â·])))
